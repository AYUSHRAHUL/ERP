generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  role        Role
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Role-specific relations
  admin       Admin?
  faculty     Faculty?
  student     Student?
  staff       Staff?
  
  @@map("users")
}

model Admin {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName String
  lastName  String
  phone     String?
  
  @@map("admins")
}

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  code        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  
  courses     Course[]
  faculty     Faculty[]
  students    Student[]
  
  @@map("departments")
}

model Course {
  id           String @id @default(cuid())
  name         String
  code         String @unique
  credits      Int
  semester     Int
  departmentId String
  
  department   Department @relation(fields: [departmentId], references: [id])
  subjects     Subject[]
  enrollments  Enrollment[]
  
  @@map("courses")
}

model Subject {
  id       String @id @default(cuid())
  name     String
  code     String @unique
  credits  Int
  courseId String
  
  course      Course @relation(fields: [courseId], references: [id])
  allocations SubjectAllocation[]
  attendance  Attendance[]
  marks       Mark[]
  
  @@map("subjects")
}

model Faculty {
  id           String @id @default(cuid())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  employeeId   String @unique
  firstName    String
  lastName     String
  phone        String?
  qualification String?
  experience   Int?
  departmentId String
  
  department   Department @relation(fields: [departmentId], references: [id])
  allocations  SubjectAllocation[]
  attendance   Attendance[]
  marks        Mark[]
  
  @@map("faculty")
}

model Student {
  id             String @id @default(cuid())
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  rollNumber     String @unique
  firstName      String
  lastName       String
  phone          String?
  dateOfBirth    DateTime?
  address        String?
  guardianName   String?
  guardianPhone  String?
  departmentId   String
  semester       Int
  admissionYear  Int
  
  department     Department @relation(fields: [departmentId], references: [id])
  enrollments    Enrollment[]
  attendance     Attendance[]
  marks          Mark[]
  feePayments    FeePayment[]
  
  @@map("students")
}

model Staff {
  id         String @id @default(cuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  employeeId String @unique
  firstName  String
  lastName   String
  phone      String?
  department StaffDepartment
  
  @@map("staff")
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  semester  Int
  year      Int
  createdAt DateTime @default(now())
  
  student Student @relation(fields: [studentId], references: [id])
  course  Course  @relation(fields: [courseId], references: [id])
  
  @@unique([studentId, courseId])
  @@map("enrollments")
}

model SubjectAllocation {
  id        String @id @default(cuid())
  facultyId String
  subjectId String
  semester  Int
  year      Int
  
  faculty Faculty @relation(fields: [facultyId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  
  @@unique([facultyId, subjectId, semester, year])
  @@map("subject_allocations")
}

model Attendance {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  facultyId String
  date      DateTime
  status    AttendanceStatus
  createdAt DateTime @default(now())
  
  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  faculty Faculty @relation(fields: [facultyId], references: [id])
  
  @@unique([studentId, subjectId, date])
  @@map("attendance")
}

model Mark {
  id            String @id @default(cuid())
  studentId     String
  subjectId     String
  facultyId     String
  examType      ExamType
  maxMarks      Int
  obtainedMarks Int
  semester      Int
  year          Int
  createdAt     DateTime @default(now())
  
  student Student @relation(fields: [studentId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])
  faculty Faculty @relation(fields: [facultyId], references: [id])
  
  @@map("marks")
}

model FeeStructure {
  id           String @id @default(cuid())
  departmentId String
  semester     Int
  tuitionFee   Int
  libraryFee   Int
  labFee       Int
  otherFee     Int
  totalFee     Int
  year         Int
  
  @@unique([departmentId, semester, year])
  @@map("fee_structures")
}

model FeePayment {
  id            String      @id @default(cuid())
  studentId     String
  amount        Int
  paymentMethod PaymentMethod
  transactionId String?
  status        PaymentStatus
  semester      Int
  year          Int
  createdAt     DateTime    @default(now())
  
  student Student @relation(fields: [studentId], references: [id])
  
  @@map("fee_payments")
}

// Enums
enum Role {
  ADMIN
  FACULTY
  STUDENT
  STAFF
}

enum StaffDepartment {
  LIBRARY
  HOSTEL
  TRANSPORT
  ACCOUNTS
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum ExamType {
  QUIZ
  MIDTERM
  FINAL
  ASSIGNMENT
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  NET_BANKING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
